from itertools import groupby
import re

current_release = getCurrentRelease()

# Cleaning the phases with 0 order
deployOrderaftercleanup = []
stringOfList = ""
counter = 1

while counter <= len(releaseVariables['grpDeploymentSequence_dev']):
    for key, item in releaseVariables['grpDeploymentSequence_dev'].items():
        groupingOrder = item.split('-')

        if int(groupingOrder[0]) == 0:
            cleanup_phase = phaseApi.searchPhases(key, current_release.id, None)
            if len(cleanup_phase) != 0:
                phaseApi.deletePhase(cleanup_phase[0].id)

        elif int(groupingOrder[0]) == counter:
            if len(stringOfList) != 0:
                stringOfList = stringOfList + ";" + key + ":" + item
            else:
                stringOfList = key + ":" + item

    if len(stringOfList) != 0:
        deployOrderaftercleanup.append(stringOfList)

    counter += 1
    stringOfList = ""

print(deployOrderaftercleanup)

# Identify the main task where we will add everything
main_task = taskApi.searchTasksByTitle("Deploy changes/build", phaseName, current_release.id)[0]

# Create a global Sequential Group for all "Tower changes" at the beginning
global_tower_sequential_group = taskApi.newTask("xlrelease.SequentialGroup")
global_tower_sequential_group.title = "Global Sequential Tower Changes"
taskApi.addTask(main_task.id, global_tower_sequential_group)

# Grouping the cleaned list for parallel and sequential deployment
for item1 in deployOrderaftercleanup:
    newlist = item1.split(";")
    phaseName = ""

    for eachrow in newlist:
        if eachrow.split(":")[0] == phase.title:
            phaseName = phase.title

    if phaseName == "":
        phaseName = newlist[0].split(":")[0]

    if len(newlist) != 0:
        listoflists = []

        for item2 in newlist:
            listoflists.append(item2.split(':'))

        listoflists.sort(key=lambda x: x[1])
        print(listoflists)

        deploymentGroups = []

        for key, group in groupby(listoflists, lambda x: x[1]):
            deploymentGroups.append(list(group))

        groupCounter = 1

        for item3 in deploymentGroups:
            tower_tasks = []  # Store "Tower changes" tasks
            deploy_tasks = []  # Store "Deploy changes" tasks

            for compName in item3:
                # Search for "Tower changes to the environment" task
                tower_task_results = taskApi.searchTasksByTitle("Tower changes to the environment", compName[0], current_release.id)
                if tower_task_results:
                    tower_tasks.append(tower_task_results[0])

                # Search for "Deploy changes for the environment" task
                deploy_task = taskApi.searchTasksByTitle("Deploy changes for the environment", compName[0], current_release.id)[0]
                deploy_tasks.append(deploy_task)

            # Add all Tower changes tasks to the global sequential group
            for tower_task in tower_tasks:
                copied_tower_task = taskApi.copyTask(tower_task.id, global_tower_sequential_group.id, len(global_tower_sequential_group.getTasks()))
                copied_tower_task.title = "Tower changes for " + tower_task.title.replace("Tower changes to the environment", "").strip()
                taskApi.updateTask(copied_tower_task)
                taskApi.delete(tower_task.id)  # Remove original task

            # Create Parallel Group for Deploy tasks
            group_task = taskApi.newTask("xlrelease.ParallelGroup")
            group_task.title = "Parallel Execution " + str(groupCounter)
            taskApi.addTask(main_task.id, group_task)

            # Add "Deploy changes for the environment" tasks inside parallel execution group
            for deploy_task in deploy_tasks:
                copied_task = taskApi.copyTask(deploy_task.id, group_task.id, len(group_task.getTasks()))
                copied_task.title = "Deploy changes to " + deploy_task.title.replace("Deploy changes for the environment", "").strip()
                taskApi.updateTask(copied_task)
                taskApi.delete(deploy_task.id)  # Remove original task

            groupCounter += 1

        # Merge phase update
        merged_phase = phaseApi.searchPhases(phaseName, current_release.id, None)

        for eachPhase in merged_phase:
            if eachPhase.title == phaseName:
                eachPhase.title = releaseVariables['delivery_environment_type'] + "- Group " + str(deployOrderaftercleanup.index(item1) + 1)
                phaseApi.updatePhase(eachPhase)

# Delete the environment-specific phases that have been grouped
for key, item4 in releaseVariables['grpDeploymentSequence_dev'].items():
    phase_to_clean = phaseApi.searchPhases(key, current_release.id, None)

    for eachPhaseToDelete in phase_to_clean:
        if eachPhaseToDelete.title == key:
            phaseApi.deletePhase(eachPhaseToDelete.id)

# Set the flag so the same grouping does not execute in other phases
releaseVariables['isGrpDeploymentSequencingExecuted_dev'] = True
