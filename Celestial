def getAppConfigFromCelestial(String keyname, String spkname, String componentName) {
    try {
        def queryPath = "/api/app-config"
        def payload = [
            ComponentName   : componentName,
            User            : util.get_nbkid(),
            SPK             : spkname,
            EnvName         : determineEnvironment(),
            EnvSubGroupName : ""
        ]
        def jsonBody = JsonOutput.toJson(payload)

        def response = post(queryPath, [body: jsonBody])

        if (response?.status >= 200 && response?.status < 300) {
            def appConfig = util.parseJsonText(response.data)
            def variables = appConfig?.AppConfig?.getAt(0)?.Variables
            def appConfigValue = variables?.get(keyname)

            if (!appConfigValue) {
                throw new Exception("Variable '${keyname}' is incorrect or does not exist in celestial")
            }

            return appConfigValue
        } else {
            util.throwExp("Failed to retrieve configurations from Celestial. Status: ${response?.status}, Response: ${response?.data}")
        }
    } catch (ex) {
        if (ex instanceof HttpResponseException) {
            util.throwExp("Error in retrieving configurations from Celestial: " + ex.getResponse()?.getData(), ex)
        } else {
            util.throwExp("Error in retrieving configurations from Celestial: " + ex.getMessage(), ex)
        }
    }
}

private def determineEnvironment() {
    def releaseUrl = configHelper.getConfiguration(key: 'releaseConfigBitbucketUrl')

    if (releaseUrl.contains('dif')) {
        return "CIT"
    } else if (releaseUrl.contains('qa')) {
        return "UAT"
    } else if (releaseUrl.contains('horizon')) {
        return "CONT"
    } else {
        return "UNKNOWN"
    }
}





def getAppConfigFromCelestial(String keyname, String spkname, String componentName) { 
    try {
        print("After getAppConfigFromCelestial")

        def queryPath = C.CELESTIAL_APP_CONFIG_URI
        print("Query Path: ${queryPath}")

        def payload = [
            ComponentName   : componentName,
            UserSPK        : util.get_nbkid(),
            SPK            : spkname,
            EnvName        : determineEnvironment(),
            EnvSubGroupName: determineEnvironment()
        ]

        def jsonBody = JsonOutput.toJson(payload)
        print("JSON Body: ${jsonBody}")

        // Ensure API URL is correct
        def apiUrl = configHelper.getConfiguration(key: 'celestialUrl').replace("app", "") + queryPath
        print("Final API URL: ${apiUrl}")

        // Ensure headers are correctly passed
        def response = post(queryPath, [
            body   : jsonBody,
            headers: [
                "Authorization"                : "Basic " + mask(configHelper.getConfiguration(key: 'celestialEventToken')),
                "x-Origin"                     : configHelper.getConfiguration(key: 'celestialUrl').replace("app", ""),
                "Content-Type"                 : "application/json; charset=utf-8",
                "Access-Control-Allow-Origin"  : "*"
            ],
            followRedirects: true // Ensures we follow the 302 redirect
        ])

        print("Response: ${response}")

        // Check for valid response
        if (response?.status >= 200 && response?.status < 300) {
            def appConfig = util.parseJsonText(response.data)
            def variables = appConfig?.AppConfig?.getAt(0)?.Variables
            def appConfigValue = variables?.get(keyname)

            if (!appConfigValue) {
                throw new Exception("Variable '${keyname}' is incorrect or does not exist in Celestial")
            }
            return appConfigValue
        } else {
            throw new Exception("Failed to retrieve configurations. Status: ${response?.status}, Response: ${response?.data}")
        }
    } catch (Exception e) {
        print("Error: ${e.message}")
        throw e
    }
}




def getAppConfigFromCelestial(String keyname, String spkname, String componentName) { 
    try {
        print("After getAppConfigFromCelestial")

        def queryPath = C.CELESTIAL_APP_CONFIG_URI
        print("Query Path: ${queryPath}")

        def payload = [
            ComponentName   : componentName,
            UserSPK        : util.get_nbkid(),
            SPK            : spkname,
            EnvName        : determineEnvironment(),
            EnvSubGroupName: determineEnvironment()
        ]

        def jsonBody = JsonOutput.toJson(payload)
        print("JSON Body: ${jsonBody}")

        def apiUrl = configHelper.getConfiguration(key: 'celestialUrl').replace("app", "") + queryPath
        print("Final API URL: ${apiUrl}")

        def response = post(queryPath, [
            body   : jsonBody,
            headers: [
                "Authorization"                : "Basic " + mask(configHelper.getConfiguration(key: 'celestialEventToken')),
                "x-Origin"                     : configHelper.getConfiguration(key: 'celestialUrl').replace("app", ""),
                "Content-Type"                 : "application/json; charset=utf-8",
                "Access-Control-Allow-Origin"  : "*"
            ],
            followRedirects: true
        ])

        print("Raw Response: ${response}") // Debugging log

        // **Fix: Extract response body correctly**
        def responseData = response?.data
        if (responseData instanceof InputStream) {
            responseData = responseData.text // Convert stream to string
        }

        print("Response Data (String): ${responseData}") // Debugging log

        // **Fix: Ensure JSON parsing handles errors**
        def appConfig
        try {
            appConfig = util.parseJsonText(responseData)
        } catch (Exception jsonError) {
            throw new Exception("Failed to parse JSON: ${jsonError.message}, Raw Response: ${responseData}")
        }

        def variables = appConfig?.AppConfig?.getAt(0)?.Variables
        def appConfigValue = variables?.get(keyname)

        if (!appConfigValue) {
            throw new Exception("Variable '${keyname}' is incorrect or does not exist in Celestial")
        }
        return appConfigValue

    } catch (Exception e) {
        print("Error: ${e.message}")
        throw e
    }
}






def getAppConfigFromCelestial(String keyname, String spkname, String componentName) { 
    try {
        print("After getAppConfigFromCelestial")

        def queryPath = C.CELESTIAL_APP_CONFIG_URI
        print("Query Path: ${queryPath}")

        def payload = [
            ComponentName   : componentName,
            UserSPK        : util.get_nbkid(),
            SPK            : spkname,
            EnvName        : determineEnvironment(),
            EnvSubGroupName: determineEnvironment()
        ]

        def jsonBody = JsonOutput.toJson(payload)
        print("JSON Body: ${jsonBody}")

        def apiUrl = configHelper.getConfiguration(key: 'celestialUrl').replace("app", "") + queryPath
        print("Final API URL: ${apiUrl}")

        def response = post(queryPath, [
            body   : jsonBody,
            headers: [
                "Authorization"                : "Basic " + mask(configHelper.getConfiguration(key: 'celestialEventToken')),
                "x-Origin"                     : configHelper.getConfiguration(key: 'celestialUrl').replace("app", ""),
                "Content-Type"                 : "application/json; charset=utf-8",
                "Access-Control-Allow-Origin"  : "*"
            ],
            followRedirects: true
        ])

        print("Response Status: ${response?.status}") // Log the response code
        print("Raw Response: ${response}") // Debugging log

        // **Check if response is successful**
        if (response?.status < 200 || response?.status >= 300) {
            throw new Exception("Failed to retrieve configurations. Status: ${response?.status}, Response: ${response?.data}")
        }

        // **Fix: Extract response body correctly**
        def responseData = response?.data
        if (responseData instanceof InputStream) {
            responseData = responseData.text // Convert stream to string
        }

        print("Response Data (String): ${responseData}") // Debugging log

        // **Fix: Ensure JSON parsing handles errors**
        def appConfig
        try {
            appConfig = util.parseJsonText(responseData)
        } catch (Exception jsonError) {
            throw new Exception("Failed to parse JSON: ${jsonError.message}, Raw Response: ${responseData}")
        }

        def variables = appConfig?.AppConfig?.getAt(0)?.Variables
        def appConfigValue = variables?.get(keyname)

        if (!appConfigValue) {
            throw new Exception("Variable '${keyname}' is incorrect or does not exist in Celestial")
        }
        return appConfigValue

    } catch (Exception e) {
        print("Error: ${e.message}")
        throw e
    }
}


import groovy.json.JsonSlurper

def getAppConfigFromCelestial(String keyname, String spkname, String componentName) { 
    try {
        print("After getAppConfigFromCelestial")

        def queryPath = C.CELESTIAL_APP_CONFIG_URI
        print("Query Path: ${queryPath}")

        def payload = [
            ComponentName   : componentName,
            UserSPK        : util.get_nbkid(),
            SPK            : spkname,
            EnvName        : determineEnvironment(),
            EnvSubGroupName: determineEnvironment()
        ]

        def jsonBody = JsonOutput.toJson(payload)
        print("JSON Body: ${jsonBody}")

        def apiUrl = configHelper.getConfiguration(key: 'celestialUrl').replace("app", "") + queryPath
        print("Final API URL: ${apiUrl}")

        def response = post(queryPath, [
            body   : jsonBody,
            headers: [
                "Authorization"                : "Basic " + mask(configHelper.getConfiguration(key: 'celestialEventToken')),
                "x-Origin"                     : configHelper.getConfiguration(key: 'celestialUrl').replace("app", ""),
                "Content-Type"                 : "application/json; charset=utf-8",
                "Access-Control-Allow-Origin"  : "*"
            ],
            followRedirects: true
        ])

        print("Response Status: ${response?.status}") // Debugging log
        print("Raw Response Type: " + response?.data?.class) // Check type
        print("Raw Response: " + response?.data) // Check actual content

        // **Check if response is successful**
        if (response?.status < 200 || response?.status >= 300) {
            throw new Exception("Failed to retrieve configurations. Status: ${response?.status}, Response: ${response?.data}")
        }

        // **Parse response string into a JSON object**
        def responseData = response?.data
        def jsonParser = new JsonSlurper()
        def parsedResponse = jsonParser.parseText(responseData) // Converts String to Map

        print("Parsed JSON: " + parsedResponse)

        // **Navigate JSON structure correctly**
        def variablesMap = parsedResponse?.AppConfig?.getAt(0)?.Variables
        print("Extracted Variables Map: " + variablesMap)

        // **Extract the value of keyname**
        def appConfigValue = variablesMap?.get(keyname)

        if (!appConfigValue) {
            throw new Exception("Variable '${keyname}' is incorrect or does not exist in Celestial")
        }

        return appConfigValue

    } catch (Exception e) {
        print("Error: ${e.message}")
        throw e
    }
}







_------


import groovy.json.JsonSlurper
import groovy.json.JsonOutput

class CelestialApi extends BaseApi {
    def getAppConfigFromCelestial(String keyname, String spkname, String componentName) { 
        try {
            print("After getAppConfigFromCelestial")

            def queryPath = C.CELESTIAL_APP_CONFIG_URI
            print("Query Path: ${queryPath}")

            def payload = [
                User            : util.get_nbkid(),
                SPK             : spkname,
                EnvName         : determineEnvironment(),
                EnvSubGroupName : "zk5x2vc",
                ComponentName   : componentName
            ]

            def jsonBody = JsonOutput.toJson(payload)
            print("JSON Body: ${jsonBody}")

            def response = post(queryPath, [
                body    : jsonBody,
                headers : [
                    "Authorization"               : "Basic " + mask(configHelper.getConfiguration(key: 'ce')),
                    "x-Origin"                    : configHelper.getConfiguration(key: 'celestialUrl').replace(),
                    "Content-Type"                : "application/json; charset=utf-8",
                    "Access-Control-Allow-Origin" : "*"
                ],
                followRedirects: true
            ])

            print("Response Status: ${response?.status}")
            print("Raw Response Type: " + response?.data?.class)
            print("Raw Response: " + response?.data)

            // **Ensure response is successful**
            if (response?.status >= 200 && response?.status < 300) {
                // **Parse response data (which is a JSON string)**
                def jsonParser = new JsonSlurper()
                def parsedResponse = jsonParser.parseText(response.data)
                print("Parsed JSON: " + parsedResponse)

                // **Navigate JSON structure safely**
                def variablesMap = parsedResponse?.AppConfig?.getAt(0)?.Variables
                print("Extracted Variables Map: " + variablesMap)

                // **Retrieve the key value**
                def appConfigValue = variablesMap?.get(keyname)

                if (!appConfigValue) {
                    throw new Exception("Variable '${keyname}' is incorrect or does not exist in Celestial")
                }

                return appConfigValue
            } else {
                throw new Exception("Failed to retrieve configurations. Status: ${response?.status}")
            }

        } catch (Exception e) {
            print("Error: " + e.message)
            throw e
        }
    }
}




