

query = {
    "status": "queued",
    "$or": [
        {
            "task_type": "scheduler",
            "schedule_time": {"$gte": current_time}
        },
        {
            "task_type": {"$ne": "scheduler"}
        }
    ]
}

for task in collection.find({"schedule_time": {"$exists": True}}).limit(5):
    schedule_time = task["schedule_time"]
    print("Value:", schedule_time)
    print("Type:", type(schedule_time))



from dateutil import parser

for task in collection.find({"schedule_time": {"$exists": True}}).limit(5):
    if isinstance(task["schedule_time"], str):
        dt = parser.isoparse(task["schedule_time"])
        print("Parsed datetime:", dt)



from airflow import DAG
from airflow.utils.dates import days_ago
from airflow.decorators import task
from airflow.operators.empty import EmptyOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.python import PythonOperator
from airflow.triggers.date_time import DateTimeTrigger
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.python import PythonVirtualenvOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator, BranchPythonOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.operators.python import PythonOperator, BranchPythonOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.operators.python import PythonOperator
from airflow.triggers.date_time import DateTimeTrigger
from airflow.operators.python import PythonOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.python import PythonOperator, BranchPythonOperator
from airflow.operators.python import PythonOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.python import PythonOperator
from airflow.operators.python import PythonOperator
from airflow.operators.python import PythonOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.operators.python import PythonOperator
from airflow.operators.python import PythonOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.python import PythonOperator
from airflow.operators.empty import EmptyOperator
from airflow.triggers.date_time import DateTimeTrigger
from airflow.operators.python import PythonOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.operators.python import PythonOperator
from airflow.operators.empty import EmptyOperator
from airflow.triggers.date_time import DateTimeTrigger
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.decorators import dag
from airflow.operators.python import PythonOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.operators.empty import EmptyOperator
from airflow.triggers.date_time import DateTimeTrigger
from airflow.operators.python import PythonOperator
from airflow.operators.empty import EmptyOperator
from airflow.decorators import task
from airflow.triggers.date_time import DateTimeTrigger
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.decorators import dag
from airflow.triggers.date_time import DateTimeTrigger
from airflow.utils.timezone import parse as parse_time

from datetime import datetime
import pymongo

def get_task_time_from_mongo():
    # Replace with your MongoDB query logic
    mongo_uri = "mongodb://yourhost:port"
    client = pymongo.MongoClient(mongo_uri)
    db = client["your_db"]
    task = db.tasks.find_one({"status": "queued"})
    scheduled_time = task["scheduled_time"]  # ISO format: "2025-08-07T15:45:00"
    return scheduled_time

with DAG(
    dag_id="deferred_task_processor",
    start_date=days_ago(1),
    schedule_interval="@hourly",
    catchup=False,
    tags=["deferred", "mongodb"],
) as dag:

    start = EmptyOperator(task_id="start")

    get_scheduled_time = PythonOperator(
        task_id="get_scheduled_time",
        python_callable=get_task_time_from_mongo,
    )

    wait_until_time = EmptyOperator(
        task_id="wait_until_scheduled_time",
        trigger_rule="all_done",
        deferrable=True,
        trigger=DateTimeTrigger(
            moment=parse_time(get_task_time_from_mongo())
        ),
    )

    process_task = PythonOperator(
        task_id="process_task",
        python_callable=lambda: print("Task executed at scheduled time"),
    )

    end = EmptyOperator(task_id="end")

    start >> get_scheduled_time >> wait_until_time >> process_task >> end





# my_triggers.py
from airflow.triggers.base import BaseTrigger, TriggerEvent
import asyncio
from datetime import datetime

class WaitUntilTimeTrigger(BaseTrigger):
    def __init__(self, run_at_iso: str):
        super().__init__()
        self.run_at = datetime.fromisoformat(run_at_iso)

    def serialize(self):
        return (
            "my_triggers.WaitUntilTimeTrigger",
            {"run_at_iso": self.run_at.isoformat()},
        )

    async def run(self):
        while datetime.now() < self.run_at:
            await asyncio.sleep(10)  # Non-blocking sleep
        yield TriggerEvent({"message": "Time reached!"})







# dags/my_dag.py
from airflow import DAG
from airflow.operators.empty import EmptyOperator
from airflow.sensors.base import BaseSensorOperator
from my_triggers import WaitUntilTimeTrigger
from datetime import datetime, timedelta
from airflow.utils.dates import days_ago

class DeferrableTimeSensor(BaseSensorOperator):
    def __init__(self, scheduled_time, **kwargs):
        super().__init__(**kwargs)
        self.scheduled_time = scheduled_time

    def poke(self, context):
        return False  # Never poke, only defer

    def execute(self, context):
        self.defer(trigger=WaitUntilTimeTrigger(self.scheduled_time), method_name="execute_complete")

    def execute_complete(self, context, event=None):
        print("Deferred until:", self.scheduled_time)
        return "Resumed at scheduled time"

with DAG(
    dag_id="custom_trigger_mongo_wait",
    start_date=days_ago(1),
    schedule_interval=None,
    catchup=False,
) as dag:

    start = EmptyOperator(task_id="start")

    wait = DeferrableTimeSensor(
        task_id="wait_until_scheduled_time",
        scheduled_time="2025-08-07T18:30:00",  # You can dynamically pass from MongoDB
    )

    done = EmptyOperator(task_id="done")

    start >> wait >> done
