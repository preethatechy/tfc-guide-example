XLR â†’ Script Task (PrePostScript):
Constructs endpoints for PreDeploy and PostDeploy:

Pre Inventory, Credential, Vault, Template

Post Inventory, Credential, Vault, Template

Script Task â†’ DataStoreNP:

Checks if each of the 8 endpoints already exists

Constructs only missing ones

Script Task â†’ Plugin (PrePostPlugin):

Passes map of all 8 endpoints

Plugin â†’ Tower:

Executes API calls only for the unresolved ones

Caches the resolved Tower IDs back to DataStoreNP

ðŸ”¸ Phase 2: Deploy
XLR â†’ Script Task (DeployScript):

Constructs endpoints for Deploy:

Inventory, Credential, Vault, Template

Script Task â†’ DataStoreNP:

Checks if Deploy-specific endpoints exist

Constructs any that are missing

Script Task â†’ Plugin (DeployPlugin):

Passes 4 deploy endpoints

Plugin â†’ Tower:

Makes calls only for unresolved Deploy endpoints

Saves results to DataStoreNP



  Stage | Total Endpoints | Script Task Constructs | Plugin Calls (if cache miss)
PreDeploy | 4 | 4 | 4
PostDeploy | 4 | 4 | 4
Deploy | 4 | 4 | 4
Total | 12 | 12 | Up to 12


  âœ… Scenario 1: First deployment to DEV1
Pre/Post: 8 new endpoints

Deploy: 4 new endpoints
Total Tower API calls: 12
All unique

âœ… Scenario 2: Second deployment to DEV2 (same config)
Script task re-generates same endpoints

All found in DataStoreNP
Total Tower API calls: 0

âœ… Scenario 3: Third deployment to DEV3 (PostDeploy config changed)
PreDeploy: 4 in cache â†’ 0 calls

PostDeploy: 4 changed â†’ 4 new calls

Deploy: 4 in cache â†’ 0 calls
Total Tower API calls: 4

âœ… Scenario 4: Deploy to PROD1 (same config as DEV1 but different phase type)
Uses DataStoreProd

Pre/Post: 8 endpoints (new in PROD)

Deploy: 4 endpoints (new in PROD)
Total Tower API calls: 12



  Scenario | DataStore Used | API Calls | Reason
DEV1 (first) | DataStoreNP | 12 | All endpoints new
DEV2 (same cfg) | DataStoreNP | 0 | All endpoints reused
DEV3 (post diff) | DataStoreNP | 4 | Only PostDeploy changed
PROD1 (first) | DataStoreProd | 12 | Different store, treated as new



ordered_envs = releaseVariables['release_environments'].split(",")

for env in ordered_envs:
    # Find environment in deploymentGroups
    for group in deploymentGroups:
        for compName in group:
            if compName[0] == env:
                tower_task_results = taskApi.searchTasksByTitle("Tower changes for the environment", env, current_release.id)
                if tower_task_results:
                    tower_task = tower_task_results[0]
                    copied_tower_task = taskApi.copyTask(tower_task.id, tower_sequential_task.id, len(tower_sequential_task.getTasks()))
                    copied_tower_task.title = "Tower changes for " + env
                    taskApi.updateTask(copied_tower_task)

                    # Update subtasks recursively
                    if hasattr(copied_tower_task, 'getTasks'):
                        for sub_task in copied_tower_task.getTasks():
                            sub_task.title += " - " + env
                            taskApi.updateTask(sub_task)

                            if hasattr(sub_task, 'getTasks'):
                                for nested_sub_task in sub_task.getTasks():
                                    nested_sub_task.title += " - " + env
                                    taskApi.updateTask(nested_sub_task)

                    taskApi.delete(tower_task.id)

