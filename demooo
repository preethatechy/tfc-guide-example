XLR â†’ Script Task (PrePostScript):
Constructs endpoints for PreDeploy and PostDeploy:

Pre Inventory, Credential, Vault, Template

Post Inventory, Credential, Vault, Template

Script Task â†’ DataStoreNP:

Checks if each of the 8 endpoints already exists

Constructs only missing ones

Script Task â†’ Plugin (PrePostPlugin):

Passes map of all 8 endpoints

Plugin â†’ Tower:

Executes API calls only for the unresolved ones

Caches the resolved Tower IDs back to DataStoreNP

ðŸ”¸ Phase 2: Deploy
XLR â†’ Script Task (DeployScript):

Constructs endpoints for Deploy:

Inventory, Credential, Vault, Template

Script Task â†’ DataStoreNP:

Checks if Deploy-specific endpoints exist

Constructs any that are missing

Script Task â†’ Plugin (DeployPlugin):

Passes 4 deploy endpoints

Plugin â†’ Tower:

Makes calls only for unresolved Deploy endpoints

Saves results to DataStoreNP



  Stage | Total Endpoints | Script Task Constructs | Plugin Calls (if cache miss)
PreDeploy | 4 | 4 | 4
PostDeploy | 4 | 4 | 4
Deploy | 4 | 4 | 4
Total | 12 | 12 | Up to 12


  âœ… Scenario 1: First deployment to DEV1
Pre/Post: 8 new endpoints

Deploy: 4 new endpoints
Total Tower API calls: 12
All unique

âœ… Scenario 2: Second deployment to DEV2 (same config)
Script task re-generates same endpoints

All found in DataStoreNP
Total Tower API calls: 0

âœ… Scenario 3: Third deployment to DEV3 (PostDeploy config changed)
PreDeploy: 4 in cache â†’ 0 calls

PostDeploy: 4 changed â†’ 4 new calls

Deploy: 4 in cache â†’ 0 calls
Total Tower API calls: 4

âœ… Scenario 4: Deploy to PROD1 (same config as DEV1 but different phase type)
Uses DataStoreProd

Pre/Post: 8 endpoints (new in PROD)

Deploy: 4 endpoints (new in PROD)
Total Tower API calls: 12



  Scenario | DataStore Used | API Calls | Reason
DEV1 (first) | DataStoreNP | 12 | All endpoints new
DEV2 (same cfg) | DataStoreNP | 0 | All endpoints reused
DEV3 (post diff) | DataStoreNP | 4 | Only PostDeploy changed
PROD1 (first) | DataStoreProd | 12 | Different store, treated as new



ordered_envs = releaseVariables['release_environments'].split(",")

for env in ordered_envs:
    # Find environment in deploymentGroups
    for group in deploymentGroups:
        for compName in group:
            if compName[0] == env:
                tower_task_results = taskApi.searchTasksByTitle("Tower changes for the environment", env, current_release.id)
                if tower_task_results:
                    tower_task = tower_task_results[0]
                    copied_tower_task = taskApi.copyTask(tower_task.id, tower_sequential_task.id, len(tower_sequential_task.getTasks()))
                    copied_tower_task.title = "Tower changes for " + env
                    taskApi.updateTask(copied_tower_task)

                    # Update subtasks recursively
                    if hasattr(copied_tower_task, 'getTasks'):
                        for sub_task in copied_tower_task.getTasks():
                            sub_task.title += " - " + env
                            taskApi.updateTask(sub_task)

                            if hasattr(sub_task, 'getTasks'):
                                for nested_sub_task in sub_task.getTasks():
                                    nested_sub_task.title += " - " + env
                                    taskApi.updateTask(nested_sub_task)

                    taskApi.delete(tower_task.id)


----------------------


from itertools import groupby
import re

current_release = getCurrentRelease()

# Cleaning the phases with 0 order
deployOrderaftercleanup = []
stringOfList = ""
counter = 1

while counter <= len(releaseVariables['grpDeploymentSequence_dev']):
    for key, item in releaseVariables['grpDeploymentSequence_dev'].items():
        groupingOrder = item.split('-')

        if int(groupingOrder[0]) == 0:
            cleanup_phase = phaseApi.searchPhases(key, current_release.id, None)
            if len(cleanup_phase) != 0:
                phaseApi.deletePhase(cleanup_phase[0].id)

        elif int(groupingOrder[0]) == counter:
            if len(stringOfList) != 0:
                stringOfList = stringOfList + ";" + key + ":" + item
            else:
                stringOfList = key + ":" + item

    if len(stringOfList) != 0:
        deployOrderaftercleanup.append(stringOfList)

    counter += 1
    stringOfList = ""

print(deployOrderaftercleanup)

# Process each cleaned deployment sequence
for item1 in deployOrderaftercleanup:
    newlist = item1.split(";")
    phaseName = newlist[0].split(":")[0]  # Initialize phase name properly

    if len(newlist) != 0:
        listoflists = []
        for item2 in newlist:
            listoflists.append(item2.split(':'))

        # âœ… Sort environments based on user-defined order
        env_order = [env.strip() for env in releaseVariables['release_environments'].split(",")]
        env_order_map = {env: idx for idx, env in enumerate(env_order)}
        listoflists.sort(key=lambda x: env_order_map.get(x[0], 999))

        print(listoflists)

        deploymentGroups = []
        for key, group in groupby(listoflists, lambda x: x[1]):
            deploymentGroups.append(list(group))

        groupCounter = 1
        current_task = taskApi.searchTasksByTitle("Deploy changes/build", phaseName, current_release.id)[0]

        # âœ… Create Tower Sequential Execution only once per phase
        tower_sequential_task = taskApi.newTask("xlrelease.SequentialGroup")
        tower_sequential_task.title = "Tower Sequential Execution"
        taskApi.addTask(current_task.id, tower_sequential_task)

        # âœ… Add all Tower changes inside the same Tower Sequential Execution group
        for item3 in deploymentGroups:
            for compName in item3:
                tower_task_results = taskApi.searchTasksByTitle("Tower changes for the environment", compName[0], current_release.id)
                if tower_task_results:
                    tower_task = tower_task_results[0]
                    copied_tower_task = taskApi.copyTask(tower_task.id, tower_sequential_task.id, len(tower_sequential_task.getTasks()))
                    copied_tower_task.title = "Tower changes for " + compName[0]
                    taskApi.updateTask(copied_tower_task)

                    # Modify Subtasks Inside Tower Task (Only if it's a group task)
                    if hasattr(copied_tower_task, 'getTasks'):
                        for sub_task in copied_tower_task.getTasks():
                            sub_task.title += " - " + compName[0]
                            taskApi.updateTask(sub_task)

                            # Modify Nested Subtasks
                            if hasattr(sub_task, 'getTasks'):
                                for nested_sub_task in sub_task.getTasks():
                                    nested_sub_task.title += " - " + compName[0]
                                    taskApi.updateTask(nested_sub_task)

                    taskApi.delete(tower_task.id)  # Remove original task

        # âœ… Create Parallel Execution Groups after Tower Sequential
        for item3 in deploymentGroups:
            parallel_group_task = taskApi.newTask("xlrelease.ParallelGroup")
            parallel_group_task.title = "Parallel Execution " + str(groupCounter)
            taskApi.addTask(current_task.id, parallel_group_task)

            # Add Deploy changes in parallel
            for compName in item3:
                deploy_task_results = taskApi.searchTasksByTitle("Deploy changes for the environment", compName[0], current_release.id)
                if deploy_task_results:
                    deploy_task = deploy_task_results[0]
                    copied_deploy_task = taskApi.copyTask(deploy_task.id, parallel_group_task.id, len(parallel_group_task.getTasks()))
                    copied_deploy_task.title = "Deploy changes to " + compName[0]
                    taskApi.updateTask(copied_deploy_task)
                    taskApi.delete(deploy_task.id)

            groupCounter += 1

        # Update phase title
        merged_phase = phaseApi.searchPhases(phaseName, current_release.id, None)
        for eachPhase in merged_phase:
            if eachPhase.title == phaseName:
                eachPhase.title = releaseVariables['delivery_environment_type'] + "- Group " + str(deployOrderaftercleanup.index(item1) + 1)
                phaseApi.updatePhase(eachPhase)

# Delete the environment-specific phases that have been grouped
for key, item4 in releaseVariables['grpDeploymentSequence_dev'].items():
    phase_to_clean = phaseApi.searchPhases(key, current_release.id, None)
    for eachPhaseToDelete in phase_to_clean:
        if eachPhaseToDelete.title == key:
            phaseApi.deletePhase(eachPhaseToDelete.id)

# Set the flag so the same grouping does not execute in other phases
releaseVariables['isGrpDeploymentSequencingExecuted_dev'] = True

==============================

from itertools import groupby
import re

current_release = getCurrentRelease()

# Step 1: Get user-defined environment order
user_defined_order = list(releaseVariables['grpDeploymentSequence_dev'].keys())

# Step 2: Cleanup phases with 0 order
deployOrderaftercleanup = []
stringOfList = ""
counter = 1

while counter <= len(releaseVariables['grpDeploymentSequence_dev']):
    for key, item in releaseVariables['grpDeploymentSequence_dev'].items():
        groupingOrder = item.split('-')

        if int(groupingOrder[0]) == 0:
            cleanup_phase = phaseApi.searchPhases(key, current_release.id, None)
            if len(cleanup_phase) != 0:
                phaseApi.deletePhase(cleanup_phase[0].id)

        elif int(groupingOrder[0]) == counter:
            if len(stringOfList) != 0:
                stringOfList = stringOfList + ";" + key + ":" + item
            else:
                stringOfList = key + ":" + item

    if len(stringOfList) != 0:
        deployOrderaftercleanup.append(stringOfList)

    counter += 1
    stringOfList = ""

print(deployOrderaftercleanup)

# Step 3: Process each cleaned deployment sequence
for item1 in deployOrderaftercleanup:
    newlist = item1.split(";")
    phaseName = newlist[0].split(":")[0]

    if len(newlist) != 0:
        listoflists = []
        for item2 in newlist:
            listoflists.append(item2.split(':'))

        deploymentGroups = []
        for key, group in groupby(listoflists, lambda x: x[1]):
            deploymentGroups.append(list(group))

        groupCounter = 1
        current_task = taskApi.searchTasksByTitle("Deploy changes/build", phaseName, current_release.id)[0]

        # âœ… Create Tower Sequential Execution once per phase
        tower_sequential_task = taskApi.newTask("xlrelease.SequentialGroup")
        tower_sequential_task.title = "Tower Sequential Execution"
        taskApi.addTask(current_task.id, tower_sequential_task)

        # âœ… Add all Tower changes inside the same Tower Sequential Execution group
        for item3 in deploymentGroups:
            for compName in item3:
                env_name = compName[0]  # Use the same pattern as deploy
                tower_task_results = taskApi.searchTasksByTitle("Tower changes for the environment", env_name, current_release.id)
                if tower_task_results:
                    tower_task = tower_task_results[0]
                    copied_tower_task = taskApi.copyTask(tower_task.id, tower_sequential_task.id, len(tower_sequential_task.getTasks()))
                    copied_tower_task.title = "Tower changes for " + env_name
                    taskApi.updateTask(copied_tower_task)

                    # Modify subtasks if it's a group task
                    if hasattr(copied_tower_task, 'getTasks'):
                        for sub_task in copied_tower_task.getTasks():
                            sub_task.title += " - " + env_name
                            taskApi.updateTask(sub_task)

                            # Modify nested subtasks
                            if hasattr(sub_task, 'getTasks'):
                                for nested_sub_task in sub_task.getTasks():
                                    nested_sub_task.title += " - " + env_name
                                    taskApi.updateTask(nested_sub_task)

                    taskApi.delete(tower_task.id)  # Remove original task

        # âœ… Create Parallel Execution Groups after Tower Sequential
        for item3 in deploymentGroups:
            parallel_group_task = taskApi.newTask("xlrelease.ParallelGroup")
            parallel_group_task.title = "Parallel Execution " + str(groupCounter)
            taskApi.addTask(current_task.id, parallel_group_task)

            for compName in item3:
                deploy_task_results = taskApi.searchTasksByTitle("Deploy changes for the environment", compName[0], current_release.id)
                if deploy_task_results:
                    deploy_task = deploy_task_results[0]
                    copied_deploy_task = taskApi.copyTask(deploy_task.id, parallel_group_task.id, len(parallel_group_task.getTasks()))
                    copied_deploy_task.title = "Deploy changes to " + compName[0]
                    taskApi.updateTask(copied_deploy_task)
                    taskApi.delete(deploy_task.id)  # Remove original task

            groupCounter += 1

        # Update the phase title
        merged_phase = phaseApi.searchPhases(phaseName, current_release.id, None)
        for eachPhase in merged_phase:
            if eachPhase.title == phaseName:
                eachPhase.title = releaseVariables['delivery_environment_type'] + " - Group " + str(deployOrderaftercleanup.index(item1) + 1)
                phaseApi.updatePhase(eachPhase)

# Step 4: Clean up grouped phases
for key, item4 in releaseVariables['grpDeploymentSequence_dev'].items():
    phase_to_clean = phaseApi.searchPhases(key, current_release.id, None)
    for eachPhaseToDelete in phase_to_clean:
        if eachPhaseToDelete.title == key:
            phaseApi.deletePhase(eachPhaseToDelete.id)

# Step 5: Set sequencing flag
releaseVariables['isGrpDeploymentSequencingExecuted_dev'] = True

