def autoTagging(config) {
    def path = pwd()
    def commiter_ID = pipelineUtil.get_nbkid(config)
    println("NBK_ID of user who triggered the build: ${commiter_ID}")
    config.commiterId = "${commiter_ID}"

    // Process .tfvars and .tf files
    ["tfvars", "tf"].each { ext ->
        findFiles(glob: "**/*.${ext}").each { file ->
            def filePath = "${path}/${file}"
            def fileContents = pipelineUtil.script.readFile(filePath)

            if (file.name.endsWith(".tfvars")) {
                changeFileContents(/(?s)(?i)tags\s*=\s*\{[^}]*\}/, commiter_ID, fileContents, file.name, filePath)
            } else {
                handleTfFile(fileContents, file.name, filePath, commiter_ID)
            }
        }
    }
}

def handleTfFile(fileContents, fileName, filePath, commiter_ID) {
    def varTags = fileContents.findAll(/(?i)var\.tags/).unique()
    def hasModulesOrResources = fileContents.contains("module") || fileContents.contains("resource")
    def hasVariables = fileContents.contains("variable")

    if (hasModulesOrResources) {
        varTags.each {
            fileContents = fileContents.replace(it, "merge(${it}, { CreatorID = \"${commiter_ID}\" })")
        }
        if (varTags.size() < fileContents.findAll(/(module|resource)/).size()) {
            changeFileContents(/(?s)(?i)tags\s*=\s*\{[^}]*\}/, commiter_ID, fileContents, fileName, filePath)
        } else {
            writeFile(file: filePath, text: fileContents, encoding: pipelineConstants.msBuildPipelineConstants.DEFAULT_WEBCONFIG_ENCODING)
        }
    } else if (hasVariables) {
        changeFileContents(/(?s)(?i)default\s*=\s*\{[^}]*\}/, commiter_ID, fileContents, fileName, filePath)
    }
}

def changeFileContents(regex, commiter_ID, fileContents, fileName, filePath) {
    def matches = fileContents.findAll(regex).unique()
    def modifiedContents = matches.collect { block ->
        def cleanedBlock = removeCreatorID(block)
        if (cleanedBlock.startsWith("{")) {
            "merge(${cleanedBlock}, { CreatorID = \"${commiter_ID}\" })"
        } else {
            cleanedBlock
        }
    }

    matches.eachWithIndex { match, idx ->
        fileContents = fileContents.replace(match, modifiedContents[idx])
    }

    writeFile(file: filePath, text: fileContents, encoding: pipelineConstants.msBuildPipelineConstants.DEFAULT_WEBCONFIG_ENCODING)
}

def removeCreatorID(block) {
    block.replaceAll(/CreatorID\s*=\s*".*?"\s*,?/, "").replaceAll(/,\s*}/, "}").trim()
}
