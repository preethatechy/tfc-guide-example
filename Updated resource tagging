def autoTagging(config) {
    def path = pwd(), commiter_ID = pipelineUtil.get_nbkid(config)
    println("NBK_ID of user who triggered the build: ${commiter_ID}")
    config.commiterId = "${commiter_ID}"

    // Process all .tfvars and .tf files
    [".tfvars", ".tf"].each { ext ->
        findFiles(glob: "**/*${ext}").each { file ->
            def filePath = "${path}/${file}", fileContents = pipelineUtil.script.readFile(filePath)

            if (file.name.endsWith(".tfvars")) {
                updateFile(fileContents, /(?i)tags\s*=\s*\{[^}]*\}/, commiter_ID, filePath)
            } else if (fileContents.contains("module") || fileContents.contains("resource")) {
                handleMainFile(fileContents, commiter_ID, filePath)
            } else if (fileContents.contains("variable")) {
                updateFile(fileContents, /(?i)default\s*=\s*\{[^}]*\}/, commiter_ID, filePath)
            }
        }
    }
}

def updateFile(fileContents, regex, commiter_ID, filePath) {
    def updatedContents = fileContents.replaceAll(regex) { match ->
        def block = match[0]
        block = removeCreatorID(block) // Remove existing CreatorID entries
        block.startsWith("{") 
            ? "merge(${block.trim()}, { CreatorID = \\\"${commiter_ID}\\\" })" 
            : block
    }

    if (updatedContents != fileContents) {
        writeFile(file: filePath, text: updatedContents, encoding: pipelineConstants.msBuildPipelineConstants.DEFAULT_WEBCONFIG_ENCODING)
    }
}

def handleMainFile(fileContents, commiter_ID, filePath) {
    def varTags = fileContents.findAll(/(?i)var\.tags/).unique()
    varTags.each {
        fileContents = fileContents.replace(it, "merge(${it}, { CreatorID = \\\"${commiter_ID}\\\" })")
    }

    if (varTags.isEmpty() || varTags.size() < fileContents.findAll(/(module|resource)/).size()) {
        updateFile(fileContents, /(?i)tags\s*=\s*\{[^}]*\}/, commiter_ID, filePath)
    } else {
        writeFile(file: filePath, text: fileContents, encoding: pipelineConstants.msBuildPipelineConstants.DEFAULT_WEBCONFIG_ENCODING)
    }
}

def removeCreatorID(block) {
    if (!block) return block

    block = block.replaceAll(/CreatorID\s*=\s*".*?"\s*,?/, "") // Remove existing CreatorID
                 .replaceAll(/,\s*}/, "}") // Remove trailing commas before closing braces
                 .trim()

    return block
}
