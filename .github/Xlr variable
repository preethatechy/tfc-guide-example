### Replace the common vars with environment-specific ones
for key, item in releaseVariables['grpDeployment Sequence_dev'].items():
    deployTaskName = 'Deploy ' + '${' + 'artifactoryBuildName' + '}'
    preDeployTaskName = "Execute Pre deploy tower job template"
    postDeployTaskName = "Execute Post deploy tower job template"
    createTemplateTaskName = "Create Tower Job Template"
    taskReference = "Set Variables for Deployment Sequencing"
    parallelDeployTaskName = 'ParallelDeploy ' + '${' + 'artifactoryBuildName' + '}'
    
    phaseTitle = getCurrentPhase().title

    containerid_0 = None
    containerid_1 = None

    if key in phaseTitle and " (" in phaseTitle:
        phaseData = phaseTitle.split(" (")
        if phaseData[0] == key:
            taskContainers = taskApi.searchTasksByTitle(taskReference, phaseTitle, getCurrentRelease().id)
        else:
            taskContainers = taskApi.searchTasksByTitle(taskReference, key, getCurrentRelease().id)
    else:
        taskContainers = taskApi.searchTasksByTitle(taskReference, key, getCurrentRelease().id)

    if len(taskContainers) > 1:
        containerid_0 = taskContainers[0].container
        containerid_1 = taskContainers[1].container
    elif len(taskContainers) == 1:
        containerid_0 = taskContainers[0].container

    for containerid in [containerid_0, containerid_1]:
        if containerid:
            for item1 in containerid.getChildren():
                print "For Environment", key, "associating vars in ", item1.title
                isVariableUpdated = False

                for eachVariableName in releaseVariables['group_deploy_var_lst']:
                    releaseVariablePattern1 = "['" + eachVariableName + "']"
                    releaseVariablePattern2 = '["' + eachVariableName + '"]'
                    releaseValuePattern = '$' + '{' + eachVariableName + '}'
                    newVariablePattern = "['" + eachVariableName + "_" + key + "']"
                    newValuePattern = '$' + '{' + eachVariableName + '_' + key + '}'
                    newVariableName = eachVariableName + "_" + key

                    ### Update variables in task title
                    if eachVariableName in item1.title:
                        taskName = (item1.title).replace(eachVariableName, newVariableName)
                        item1.title = taskName
                        isVariableUpdated = True

                    ### Replace passwords and authentication tokens
                    itemforStore = []
                    for item2 in item1.pythonScript.getInputProperties():
                        pluginInputTextboxLabelOriginalValue = str(item2).split('.')[-1]
                        pluginInputTextboxOriginalValue = item1.pythonScript.getProperty(pluginInputTextboxLabelOriginalValue)

                        if 'taskPassword' in str(item2):
                            if item1.title in [deployTaskName, preDeployTaskName, postDeployTaskName, createTemplateTaskName, parallelDeployTaskName]:
                                item1.pythonScript.setProperty('taskPassword', "${global.towerArtifactoryPassword}")
                                isVariableUpdated = True
                        elif 'password' in str(item2):
                            if item1.title in [deployTaskName, preDeployTaskName, postDeployTaskName, createTemplateTaskName, parallelDeployTaskName]:
                                item1.pythonScript.setProperty('password', "${nonprod_tower_deployer_password}")
                                isVariableUpdated = True
                        elif 'password' not in str(item2) and pluginInputTextboxLabelOriginalValue == "token":
                            itemforStore = item2
                        if pluginInputTextboxLabelOriginalValue == "authenticationMethod" and pluginInputTextboxOriginalValue == "PAT" and itemforStore:
                            item1.pythonScript.setProperty('password', "")
                            item1.pythonScript.setProperty('token', "${global.crossConnectIDTokenNonProd}")
                            itemforStore = []
                            isVariableUpdated = True

                    ### Replace the script task variables
                    if "xlrelease.ScriptTask" in str(item1.getType()):
                        scriptInTask = item1.script
                        if newVariablePattern not in scriptInTask and newValuePattern not in scriptInTask and eachVariableName in scriptInTask:
                            scriptInTask = scriptInTask.replace(releaseVariablePattern1, newVariablePattern)
                            scriptInTask = scriptInTask.replace(releaseVariablePattern2, newVariablePattern)
                            scriptInTask = scriptInTask.replace(releaseValuePattern, newValuePattern)
                            item1.script = scriptInTask
                            isVariableUpdated = True

                    ### Replace the Output Variables
                    for key3, item3 in releaseVariables['ResultVariablesInTask'].items():
                        mylist = item3.split(",")
                        newOutputVariable = '$' + '{' + mylist[0] + '_' + key + '}'

                        if item1.title == key3:
                            if item1.title in [deployTaskName, preDeployTaskName, postDeployTaskName, parallelDeployTaskName]:
                                item1.variableMapping = {"pythonScript.jobId": newOutputVariable}
                                isVariableUpdated = True
                            elif len(mylist) == 1:
                                item1.variableMapping = {'pythonScript.result': newOutputVariable}
                                isVariableUpdated = True
                            elif len(mylist) == 2:
                                newOutputVariable1 = '$' + '{' + mylist[1] + '_' + key + '}'
                                item1.variableMapping = {'pythonScript.result': newOutputVariable, 'pythonScript.result2': newOutputVariable1}
                                isVariableUpdated = True
                            elif len(mylist) == 3:
                                newOutputVariable1 = '$' + '{' + mylist[1] + '_' + key + '}'
                                newOutputVariable2 = '$' + '{' + mylist[2] + '_' + key + '}'
                                item1.variableMapping = {'pythonScript.result': newOutputVariable, 'pythonScript.result2': newOutputVariable1, 'pythonScript.result3': newOutputVariable2}
                                isVariableUpdated = True

                if isVariableUpdated:
                    taskApi.updateTask(item1)
                    print(item1)
